
.temp.file.elf:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    d  .init	00000000 .init
00000054 l    d  .text	00000000 .text
02000000 l    d  .data	00000000 .data
02000000 l    d  .bss	00000000 .bss
02000000 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 tls.c
00000000 l    df *ABS*	00000000 
00000169 l       .debug_info	00000000 
00000169 l       .debug_info	00000000 
00000169 l       .debug_info	00000000 
00000169 l       .debug_info	00000000 
00000169 l       .debug_info	00000000 
00000169 l       .debug_info	00000000 
00000169 l       .debug_info	00000000 
00000169 l       .debug_info	00000000 
00000169 l       .debug_info	00000000 
00000169 l       .debug_info	00000000 
00000169 l       .debug_info	00000000 
00000169 l       .debug_info	00000000 
00000169 l       .debug_info	00000000 
00000169 l       .debug_info	00000000 
00000169 l       .debug_info	00000000 
00000169 l       .debug_info	00000000 
00000169 l       .debug_info	00000000 
00000169 l       .debug_info	00000000 
00000169 l       .debug_info	00000000 
00000169 l       .debug_info	00000000 
00000000 g       *ABS*	00000000 __data_size
02000800 g       .data	00000000 __global_pointer$
02000000 g       .bss	00000000 __tls_base
00000800 g       *ABS*	00000000 __flash_size
00000040 g       *ABS*	00000000 __stack_size
00000000 g       *ABS*	00000000 __bss_size
000003f0 g     F .text	00000024 memcpy
02000000 g       .bss	00000000 __bss_end
00000000 g       *ABS*	00000000 __tbss_size
000003e8 g     F .text	00000008 _set_tls
00000169  w      .debug_info	00000000 .hidden t1b_path_planner.c.c7e37ed3
00000000 g     F .init	00000000 _start
02000000 g       *ABS*	00000000 __ram
02000000 g       .bss	00000000 __data_end
00000430 g       .text	00000000 __text_end
02000000 g       .bss	00000000 __bss_start
00000414 g     F .text	0000001c memset
00000054 g     F .text	00000394 main
00000100 g       *ABS*	00000000 __ram_size
02000100 g       .init	00000000 __stack
00000000 g     F *ABS*	00000000 vfscanf
00000430 g       *ABS*	00000000 __data_source
00000000 g       *ABS*	00000000 __flash
02000000 g       .data	00000000 __data_start
00000000 g     F *ABS*	00000000 vfprintf



Disassembly of section .init:

00000000 <_start>:
   0:	    02000117          	auipc	x2,0x2000
   4:	    10010113          	addi	x2,x2,256 # 2000100 <__stack>
   8:	    02000197          	auipc	x3,0x2000
   c:	    7f818193          	addi	x3,x3,2040 # 2000800 <__global_pointer$>
  10:	    02000517          	auipc	x10,0x2000
  14:	    ff050513          	addi	x10,x10,-16 # 2000000 <__bss_end>
  18:	    43000593          	addi	x11,x0,1072
  1c:	    00000613          	addi	x12,x0,0
  20:	    3d0000ef          	jal	x1,3f0 <memcpy>
  24:	    02000517          	auipc	x10,0x2000
  28:	    fdc50513          	addi	x10,x10,-36 # 2000000 <__bss_end>
  2c:	    00000593          	addi	x11,x0,0
  30:	    00000613          	addi	x12,x0,0
  34:	    3e0000ef          	jal	x1,414 <memset>
  38:	    02000517          	auipc	x10,0x2000
  3c:	    fc850513          	addi	x10,x10,-56 # 2000000 <__bss_end>
  40:	    3a8000ef          	jal	x1,3e8 <_set_tls>
  44:	    00000513          	addi	x10,x0,0
  48:	    00000593          	addi	x11,x0,0
  4c:	    008000ef          	jal	x1,54 <main>
  50:	/-- 0000006f          	jal	x0,50 <__stack_size+0x10>

Disassembly of section .text:

00000054 <main>:
     ###         _put_byte('\n');
     ### 
     ### */
     ### 
     ### // main function
     ### int main(int argc, char const *argv[]) {
  54:	                   cf010113          	addi	x2,x2,-784
  58:	                   30112623          	sw	x1,780(x2)
  5c:	                   31212023          	sw	x18,768(x2)
  60:	                   2f312e23          	sw	x19,764(x2)
     ###     // index to keep track of the path_planned array
     ###     uint8_t idx = 0;
     ### 
     ###     // ############# Add your code here #############
     ### 
     ### int start=START_POINT;
  64:	                   020007b7          	lui	x15,0x2000
     ### int main(int argc, char const *argv[]) {
  68:	                   30812423          	sw	x8,776(x2)
  6c:	                   30912223          	sw	x9,772(x2)
     ###     int end=END_POINT;
     ###     // printf("Enter start :");
     ###     // scanf("%d",&start);
     ###     // printf("Enter end:");
     ###     // scanf("%d",&end);
     ###     int arr_map[30][5]={{1,69},{0,2,29,69},{3,1,8,69},{2,4,28,69},{3,5,6,69},{4,69},{4,7,69},{6,8,69},{2,9,12,7,69},{8,10,11,69},
  70:	                   25800613          	addi	x12,x0,600
  74:	                   00000593          	addi	x11,x0,0
  78:	                   09810513          	addi	x10,x2,152
     ### int start=START_POINT;
  7c:	                   0007c483          	lbu	x9,0(x15) # 2000000 <__bss_end>
     ###     int end=END_POINT;
  80:	                   0047c403          	lbu	x8,4(x15)
     ###     int arr_map[30][5]={{1,69},{0,2,29,69},{3,1,8,69},{2,4,28,69},{3,5,6,69},{4,69},{4,7,69},{6,8,69},{2,9,12,7,69},{8,10,11,69},
  84:	                   390000ef          	jal	x1,414 <memset>
  88:	                   00500893          	addi	x17,x0,5
  8c:	                   00200513          	addi	x10,x0,2
  90:	                   00400813          	addi	x16,x0,4
  94:	                   0f112623          	sw	x17,236(x2)
  98:	                   00700893          	addi	x17,x0,7
  9c:	                   04500793          	addi	x15,x0,69
  a0:	                   00800713          	addi	x14,x0,8
  a4:	                   01c00693          	addi	x13,x0,28
  a8:	                   00100993          	addi	x19,x0,1
  ac:	                   01d00593          	addi	x11,x0,29
  b0:	                   00300613          	addi	x12,x0,3
  b4:	                   00600313          	addi	x6,x0,6
  b8:	                   0aa12823          	sw	x10,176(x2)
  bc:	                   0ca12a23          	sw	x10,212(x2)
  c0:	                   0d012c23          	sw	x16,216(x2)
  c4:	                   0f012e23          	sw	x16,252(x2)
  c8:	                   11012823          	sw	x16,272(x2)
  cc:	                   11112a23          	sw	x17,276(x2)
  d0:	                   00900813          	addi	x16,x0,9
  d4:	                   12a12c23          	sw	x10,312(x2)
  d8:	                   15112223          	sw	x17,324(x2)
  dc:	                   00c00513          	addi	x10,x0,12
  e0:	                   00a00893          	addi	x17,x0,10
  e4:	                   08f12e23          	sw	x15,156(x2)
  e8:	                   0af12c23          	sw	x15,184(x2)
  ec:	                   0cf12623          	sw	x15,204(x2)
  f0:	                   0cd12e23          	sw	x13,220(x2)
  f4:	                   0ef12023          	sw	x15,224(x2)
  f8:	                   0ef12a23          	sw	x15,244(x2)
  fc:	                   10f12023          	sw	x15,256(x2)
 100:	                   10f12c23          	sw	x15,280(x2)
 104:	                   12f12623          	sw	x15,300(x2)
 108:	                   14f12423          	sw	x15,328(x2)
 10c:	                   0ab12a23          	sw	x11,180(x2)
 110:	                   0cc12023          	sw	x12,192(x2)
 114:	                   0ce12423          	sw	x14,200(x2)
 118:	                   0ec12423          	sw	x12,232(x2)
 11c:	                   0e612823          	sw	x6,240(x2)
 120:	                   12612223          	sw	x6,292(x2)
 124:	                   12e12423          	sw	x14,296(x2)
 128:	                   13012e23          	sw	x16,316(x2)
 12c:	                   14a12023          	sw	x10,320(x2)
 130:	                   14e12623          	sw	x14,332(x2)
 134:	                   15112823          	sw	x17,336(x2)
 138:	                   09312c23          	sw	x19,152(x2)
 13c:	                   00b00893          	addi	x17,x0,11
 140:	                   0d312223          	sw	x19,196(x2)
 144:	                   15112a23          	sw	x17,340(x2)
 148:	                   00e00893          	addi	x17,x0,14
 14c:	                   18e12423          	sw	x14,392(x2)
 150:	                   00d00713          	addi	x14,x0,13
 154:	                   18e12823          	sw	x14,400(x2)
 158:	                   1b112023          	sw	x17,416(x2)
 15c:	                   1ae12a23          	sw	x14,436(x2)
 160:	                   1d112223          	sw	x17,452(x2)
 164:	                   01000713          	addi	x14,x0,16
 168:	                   1d112c23          	sw	x17,472(x2)
 16c:	                   01100893          	addi	x17,x0,17
 170:	                   17012023          	sw	x16,352(x2)
 174:	                   17012a23          	sw	x16,372(x2)
 178:	                   18a12e23          	sw	x10,412(x2)
 17c:	                   01300813          	addi	x16,x0,19
 180:	                   00f00313          	addi	x6,x0,15
 184:	                   1ae12c23          	sw	x14,440(x2)
 188:	                   1d112e23          	sw	x17,476(x2)
 18c:	                   1ee12623          	sw	x14,492(x2)
 190:	                   01200893          	addi	x17,x0,18
 194:	                   20e12223          	sw	x14,516(x2)
 198:	                   20a12c23          	sw	x10,536(x2)
 19c:	                   01400713          	addi	x14,x0,20
 1a0:	                   01500513          	addi	x10,x0,21
 1a4:	                   14f12c23          	sw	x15,344(x2)
 1a8:	                   16f12223          	sw	x15,356(x2)
 1ac:	                   16f12c23          	sw	x15,376(x2)
 1b0:	                   18f12a23          	sw	x15,404(x2)
 1b4:	                   1af12223          	sw	x15,420(x2)
 1b8:	                   1af12e23          	sw	x15,444(x2)
 1bc:	                   1cf12423          	sw	x15,456(x2)
 1c0:	                   1ef12223          	sw	x15,484(x2)
 1c4:	                   1ef12823          	sw	x15,496(x2)
 1c8:	                   20f12423          	sw	x15,520(x2)
 1cc:	                   20e12a23          	sw	x14,532(x2)
 1d0:	                   22f12023          	sw	x15,544(x2)
 1d4:	                   19012623          	sw	x16,396(x2)
 1d8:	                   1a612823          	sw	x6,432(x2)
 1dc:	                   1f112023          	sw	x17,480(x2)
 1e0:	                   21012023          	sw	x16,512(x2)
 1e4:	                   21112e23          	sw	x17,540(x2)
 1e8:	                   22a12423          	sw	x10,552(x2)
 1ec:	                   22b12623          	sw	x11,556(x2)
 1f0:	                   23012a23          	sw	x16,564(x2)
 1f4:	                   01600813          	addi	x16,x0,22
 1f8:	                   25012023          	sw	x16,576(x2)
 1fc:	                   01700813          	addi	x16,x0,23
 200:	                   25012223          	sw	x16,580(x2)
 204:	                   24a12823          	sw	x10,592(x2)
 208:	                   01900813          	addi	x16,x0,25
 20c:	                   26a12223          	sw	x10,612(x2)
 210:	                   01a00513          	addi	x10,x0,26
 214:	                   01800893          	addi	x17,x0,24
 218:	                   27012e23          	sw	x16,636(x2)
 21c:	                   28a12623          	sw	x10,652(x2)
 220:	                   2b012023          	sw	x16,672(x2)
 224:	                   2aa12a23          	sw	x10,692(x2)
 228:	                   01b00813          	addi	x16,x0,27
 22c:	                   2ca12423          	sw	x10,712(x2)
 230:	                   2cb12623          	sw	x11,716(x2)
 234:	                   2cc12823          	sw	x12,720(x2)
     ###     {9,69},{9,69},{8,19,13,69},{12,14,69},{15,13,16,69},{14,69},{14,17,18,69},{16,69},{19,16,69},{20,12,18,69},{21,29,24,19,69},
     ###     {20,22,23,69},{21,69},{21,69},{20,25,69},{26,24,69},{25,27,28,69},{26,69},{26,29,3,69},{20,28,1,69}};
     ###     int map[30]={0};
 238:	                   00000593          	addi	x11,x0,0
 23c:	                   07800613          	addi	x12,x0,120
 240:	                   02010513          	addi	x10,x2,32
     ###     int arr_map[30][5]={{1,69},{0,2,29,69},{3,1,8,69},{2,4,28,69},{3,5,6,69},{4,69},{4,7,69},{6,8,69},{2,9,12,7,69},{8,10,11,69},
 244:	                   22f12c23          	sw	x15,568(x2)
 248:	                   22e12e23          	sw	x14,572(x2)
 24c:	                   24f12423          	sw	x15,584(x2)
 250:	                   24f12a23          	sw	x15,596(x2)
 254:	                   26f12423          	sw	x15,616(x2)
 258:	                   26e12c23          	sw	x14,632(x2)
 25c:	                   28f12023          	sw	x15,640(x2)
 260:	                   28f12a23          	sw	x15,660(x2)
 264:	                   2b012223          	sw	x16,676(x2)
 268:	                   2ad12423          	sw	x13,680(x2)
 26c:	                   2af12623          	sw	x15,684(x2)
 270:	                   2af12c23          	sw	x15,696(x2)
 274:	                   2cf12a23          	sw	x15,724(x2)
 278:	                   2ce12e23          	sw	x14,732(x2)
 27c:	                   2ed12023          	sw	x13,736(x2)
 280:	                   2ef12423          	sw	x15,744(x2)
     ###     int end=END_POINT;
 284:	                   0ff47413          	andi	x8,x8,255
     ###     int arr_map[30][5]={{1,69},{0,2,29,69},{3,1,8,69},{2,4,28,69},{3,5,6,69},{4,69},{4,7,69},{6,8,69},{2,9,12,7,69},{8,10,11,69},
 288:	                   23112823          	sw	x17,560(x2)
 28c:	                   29112823          	sw	x17,656(x2)
 290:	                   2f312223          	sw	x19,740(x2)
     ###     int map[30]={0};
 294:	                   180000ef          	jal	x1,414 <memset>
     ### int start=START_POINT;
 298:	                   0ff4f493          	andi	x9,x9,255
     ###     map[end]=1;
 29c:	                   2f010713          	addi	x14,x2,752
 2a0:	                   00241793          	slli	x15,x8,0x2
 2a4:	                   00f707b3          	add	x15,x14,x15
     ###     int distance=1;
     ###     while(map[start]==0){
 2a8:	                   00249613          	slli	x12,x9,0x2
     ### int start=START_POINT;
 2ac:	                   00048913          	addi	x18,x9,0
     ###     map[end]=1;
 2b0:	                   d337a823          	sw	x19,-720(x15)
     ###     int distance=1;
 2b4:	                   00100693          	addi	x13,x0,1
     ###     while(map[start]==0){
 2b8:	                   00c70633          	add	x12,x14,x12
     ###         for(int j=0;j<=29;j++){
     ###             if(map[j]==distance){
     ###             int i=0;
     ###             while(arr_map[j][i]!=69){
 2bc:	                   04500813          	addi	x16,x0,69
     ###     while(map[start]==0){
 2c0:	            /----> d3062703          	lw	x14,-720(x12)
 2c4:	            |  /-- 02070e63          	beq	x14,x0,300 <t1b_path_planner.c.c7e37ed3+0x197>
     ### 
     ###     }
     ###     // printf("Start distance from end = %d \n",map[start]);
     ###     int final_dist=map[start];
     ###     idx=map[start];
     ###     path_planned[0]=start;
 2c8:	            |  |   0ff77813          	andi	x16,x14,255
     ###     path_planned[idx-1]=end;
 2cc:	            |  |   2f010793          	addi	x15,x2,752
     ###     path_planned[0]=start;
 2d0:	            |  |   00910023          	sb	x9,0(x2)
     ###     path_planned[idx-1]=end;
 2d4:	            |  |   010787b3          	add	x15,x15,x16
 2d8:	            |  |   d08787a3          	sb	x8,-753(x15)
     ###     int counter=1;
     ###     int next_node=start;
     ###     while(next_node!=end){
 2dc:	            |  |   fff70713          	addi	x14,x14,-1
 2e0:	            |  |   00110613          	addi	x12,x2,1
     ###         int k=0;
     ###         while(arr_map[next_node][k]!=69){
 2e4:	            |  |   04500893          	addi	x17,x0,69
 2e8:	/-----------|--|-> 00291793          	slli	x15,x18,0x2
 2ec:	|           |  |   012787b3          	add	x15,x15,x18
 2f0:	|           |  |   00279793          	slli	x15,x15,0x2
 2f4:	|           |  |   09810693          	addi	x13,x2,152
 2f8:	|           |  |   00f687b3          	add	x15,x13,x15
 2fc:	|  /--------|--|-- 0980006f          	jal	x0,394 <t1b_path_planner.c.c7e37ed3+0x22b>
 300:	|  |        |  \-> 02010593          	addi	x11,x2,32
 304:	|  |        |      09810713          	addi	x14,x2,152
     ###             map[arr_map[j][i]]=distance+1;}
 308:	|  |        |      00168893          	addi	x17,x13,1
     ###             if(map[j]==distance){
 30c:	|  |        |  /-> 0005a783          	lw	x15,0(x11)
 310:	|  |  /-----|--|-- 04d78263          	beq	x15,x13,354 <t1b_path_planner.c.c7e37ed3+0x1eb>
     ###         for(int j=0;j<=29;j++){
 314:	|  |  |  /--|--|-> 01470713          	addi	x14,x14,20
 318:	|  |  |  |  |  |   2f010793          	addi	x15,x2,752
 31c:	|  |  |  |  |  |   00458593          	addi	x11,x11,4
 320:	|  |  |  |  |  \-- fef716e3          	bne	x14,x15,30c <t1b_path_planner.c.c7e37ed3+0x1a3>
     ###         distance++;
 324:	|  |  |  |  |      00168693          	addi	x13,x13,1
 328:	|  |  |  |  \----- f99ff06f          	jal	x0,2c0 <t1b_path_planner.c.c7e37ed3+0x157>
     ###             if(map[arr_map[j][i]]==0){
 32c:	|  |  |  |  /----> 2f010313          	addi	x6,x2,752
 330:	|  |  |  |  |      00279793          	slli	x15,x15,0x2
 334:	|  |  |  |  |      00f307b3          	add	x15,x6,x15
 338:	|  |  |  |  |      d307a303          	lw	x6,-720(x15)
 33c:	|  |  |  |  |  /-- 00031463          	bne	x6,x0,344 <t1b_path_planner.c.c7e37ed3+0x1db>
     ###             map[arr_map[j][i]]=distance+1;}
 340:	|  |  |  |  |  |   d317a823          	sw	x17,-720(x15)
     ###             i++;
 344:	|  |  |  |  |  \-> 00450513          	addi	x10,x10,4
     ###             while(arr_map[j][i]!=69){
 348:	|  |  |  |  |  /-> 00052783          	lw	x15,0(x10)
 34c:	|  |  |  |  \--|-- ff0790e3          	bne	x15,x16,32c <t1b_path_planner.c.c7e37ed3+0x1c3>
 350:	|  |  |  \-----|-- fc5ff06f          	jal	x0,314 <t1b_path_planner.c.c7e37ed3+0x1ab>
     ###             if(map[j]==distance){
 354:	|  |  \--------|-> 00070513          	addi	x10,x14,0
 358:	|  |           \-- ff1ff06f          	jal	x0,348 <t1b_path_planner.c.c7e37ed3+0x1df>
     ###             if ((map[arr_map[next_node][k]])==final_dist-1){
 35c:	|  |     /-------> 00269513          	slli	x10,x13,0x2
 360:	|  |     |         2f010313          	addi	x6,x2,752
 364:	|  |     |         00a30533          	add	x10,x6,x10
 368:	|  |     |         d3052503          	lw	x10,-720(x10)
 36c:	|  |     |         00458593          	addi	x11,x11,4
 370:	|  |     |  /----- 00e51e63          	bne	x10,x14,38c <t1b_path_planner.c.c7e37ed3+0x223>
     ###                 next_node=arr_map[next_node][k];
     ###                 path_planned[counter]=next_node;
 374:	|  |     |  |      00d60023          	sb	x13,0(x12)
     ###                 counter++;
     ###                 final_dist--;
     ###                 break;
 378:	|  |     |  |      fff70713          	addi	x14,x14,-1
 37c:	|  |     |  |      00160613          	addi	x12,x12,1
     ###         while(arr_map[next_node][k]!=69){
 380:	|  |     |  |      00068913          	addi	x18,x13,0
 384:	\--|-----|--|----- f65ff06f          	jal	x0,2e8 <t1b_path_planner.c.c7e37ed3+0x17f>
     ###     while(next_node!=end){
 388:	   |     |  |  /-> 00078593          	addi	x11,x15,0
     ###         while(arr_map[next_node][k]!=69){
 38c:	   |     |  \--|-> 0005a683          	lw	x13,0(x11)
 390:	   |     \-----|-- fd1696e3          	bne	x13,x17,35c <t1b_path_planner.c.c7e37ed3+0x1f3>
     ###     while(next_node!=end){
 394:	   \-----------\-X fe891ae3          	bne	x18,x8,388 <t1b_path_planner.c.c7e37ed3+0x21f>
 398:	                   02000737          	lui	x14,0x2000
     ###         
     ### 
     ###     // }
     ###     volatile uint8_t *temp_pointer = &NODE_POINT;
     ### 
     ### for (int i = 0; i < idx; ++i) {
 39c:	                   00000793          	addi	x15,x0,0
 3a0:	                   00870613          	addi	x12,x14,8 # 2000008 <__bss_end+0x8>
 3a4:	            /----> 00c786b3          	add	x13,x15,x12
 3a8:	            |  /-- 03079663          	bne	x15,x16,3d4 <t1b_path_planner.c.c7e37ed3+0x26b>
     ###     
     ### //     // Move to the next memory address
     ### //     memory_address++;
     ### // }
     ###     // Path Planning Computation Done Flag
     ###     CPU_DONE = 1;
 3ac:	            |  |   00100793          	addi	x15,x0,1
 3b0:	            |  |   00f70623          	sb	x15,12(x14)
     ###         _put_str("################################\n");
     ### 
     ###     #endif
     ### 
     ###     return 0;
     ### }
 3b4:	            |  |   30c12083          	lw	x1,780(x2)
 3b8:	            |  |   30812403          	lw	x8,776(x2)
 3bc:	            |  |   30412483          	lw	x9,772(x2)
 3c0:	            |  |   30012903          	lw	x18,768(x2)
 3c4:	            |  |   2fc12983          	lw	x19,764(x2)
 3c8:	            |  |   00000513          	addi	x10,x0,0
 3cc:	            |  |   31010113          	addi	x2,x2,784
 3d0:	            |  |   00008067          	jalr	x0,0(x1)
     ###     *temp_pointer = path_planned[i];
 3d4:	            |  \-> 00f105b3          	add	x11,x2,x15
 3d8:	            |      0005c583          	lbu	x11,0(x11)
     ### for (int i = 0; i < idx; ++i) {
 3dc:	            |      00178793          	addi	x15,x15,1
     ###     *temp_pointer = path_planned[i];
 3e0:	            |      00b68023          	sb	x11,0(x13)
     ### for (int i = 0; i < idx; ++i) {
 3e4:	            \----- fc1ff06f          	jal	x0,3a4 <t1b_path_planner.c.c7e37ed3+0x23b>

000003e8 <_set_tls>:
 3e8:	00050213          	addi	x4,x10,0
 3ec:	00008067          	jalr	x0,0(x1)

000003f0 <memcpy>:
 3f0:	       00050313          	addi	x6,x10,0
 3f4:	/----- 00060e63          	beq	x12,x0,410 <memcpy+0x20>
 3f8:	|  /-> 00058383          	lb	x7,0(x11)
 3fc:	|  |   00730023          	sb	x7,0(x6)
 400:	|  |   fff60613          	addi	x12,x12,-1
 404:	|  |   00130313          	addi	x6,x6,1
 408:	|  |   00158593          	addi	x11,x11,1
 40c:	|  \-- fe0616e3          	bne	x12,x0,3f8 <memcpy+0x8>
 410:	\----> 00008067          	jalr	x0,0(x1)

00000414 <memset>:
 414:	       00050313          	addi	x6,x10,0
 418:	/----- 00060a63          	beq	x12,x0,42c <memset+0x18>
 41c:	|  /-> 00b30023          	sb	x11,0(x6)
 420:	|  |   fff60613          	addi	x12,x12,-1
 424:	|  |   00130313          	addi	x6,x6,1
 428:	|  \-- fe061ae3          	bne	x12,x0,41c <memset+0x8>
 42c:	\----> 00008067          	jalr	x0,0(x1)
